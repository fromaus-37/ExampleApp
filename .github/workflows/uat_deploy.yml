name: Spinup or Teardown UAT environment

on:
  pull_request:
    types: [labeled]

concurrency: uat-pr-${{ github.event.pull_request.number }}

env:
  AZURE_RESOURCE_GROUP: rg-exampleapp-uat-pr-${{ github.event.pull_request.number }}
  AZURE_LOCATION: westeurope
  AZURE_CONTAINER_REGISTRY: crexampleappuatpr${{ github.event.pull_request.number }}
  CONTAINER_TAG: crexampleappuatpr${{ github.event.pull_request.number }}.azurecr.io/exampleapp:latest
  CONTAINER_INSTANCE: ciexampleappuatpr${{ github.event.pull_request.number }}
  CONTAINER_FQDN_PREFIX: exampleappuatpr${{ github.event.pull_request.number }}
  SQLSERVER_PASSWORD: ${{secrets.UAT_SQLSERVER_PASSWORD}}
  SQLSERVER_CONNECTION_STRING: ${{secrets.UAT_SQLSERVER_CONNECTION_STRING}}

jobs:
  build-and-deploy-uat:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'deploy')
    steps:
      - name: Update PR Comment to indicate start
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: uat
          message: |
            # UAT Environment - _Deploying ..._

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Determine if environment created
        run: |
          if [ $(az group exists -n ${{ env.AZURE_RESOURCE_GROUP }}) == "true" ]
          then
            echo "env_created=1" >> $GITHUB_ENV
          else
            echo "env_created=0" >> $GITHUB_ENV
            echo "current_time=$(date +'%d %b **%H:%M** %Z')" >> $GITHUB_ENV
          fi

      - name: Show failure in sticky comment if environment does not exist
        if: ${{ env.env_created == 0 }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: uat
          message: |
            # UAT Environment - _Deployment failed!_

            Deployment failed on ${{ env.current_time }}

            Environment does not exist. Spinup an environment and then deploy.

      - name: Fail if environment does not exist
        if: ${{ env.env_created == 0 }}
        run: |
          echo "::error ::Cannot deploy because environment does not exist"
          exit 64

      - uses: actions/checkout@v3
      - run: npm install
      - run: dotnet publish -c Release -o dist
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ env.CONTAINER_TAG }}

      - name: Login to ACR instance
        run: az acr login --name ${{env.AZURE_CONTAINER_REGISTRY}}
      - name: Publish Docker container
        run: docker push ${{ env.CONTAINER_TAG }}

        # According to page "Docker and ACI" in Docker documentation, the Docker Compose CLI
        # "adds support for running and managing containers on Azure Container Instances (ACI)"
        #
        # Without it, the command docker login azur ran but wouldn't recognise any of the parameters
        # e.g. 'the command does not accept --client-id parameter'
        # If I omitted docker login azure, the aci specific parameters of the docker context create aci
        # command would similarly fail to be recognised.
      - name: Install Docker Compose CLI
        run: >
          curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sh

      # without this, even after installing Docker Compose CLI as done above,
      # the docker context create aci command didn't work
      - name: "Docker login azure"
        run: docker login azure --client-id ${{ secrets.AZURE_CLIENT_ID }} --client-secret ${{ secrets.AZURE_CLIENT_SECRET }} --tenant-id ${{ secrets.AZURE_TENANT_ID }}

      - name: Create docker context
        run: |
          docker context create aci myacicontext --subscription-id ${{ secrets.AZURE_SUBSCRIPTION_ID }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

      - name: Create or restart container instance
        # we need to delete the existing ACI instance (the container group) first
        # as it needs to be done before Azure would allow memory/cpu reservation of a container to be altered.
        #
        # docker compose down no good for this if the container group doesn't already exist.
        # Hence to give ourselves a well-known name, instead of the docker compose default of
        # name of the containing directory, we have delcare the name of the ACI instance
        # in an environment variable. We pass it to az containe delete which does NOT return
        # an error if the container instance doesn't already exist.
        # We then also pass it to docker compose up in parameter --project-name
        run: |
          az container delete -n ${{ env.CONTAINER_INSTANCE }} -g ${{ env.AZURE_RESOURCE_GROUP }} --yes
          docker --context myacicontext compose -f .github/workflows/uat/docker-compose-uat.yml --project-name ${{ env.CONTAINER_INSTANCE }} up

      - name: Remove deploy label from PR
        if: success()
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          labels: |
            deploy

      - name: Get current datetime to write in PR comment
        run: |
          echo "current_time=$(date +'%d %b **%H:%M** %Z')" >> $GITHUB_ENV

      - name: Update PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: uat
          message: |
            # UAT Environment - _Deployed_

            UAT environment deployed on ${{ env.current_time }}

            Deployed ${{ github.sha }} to <http://${{ env.CONTAINER_FQDN_PREFIX }}.${{ env.AZURE_LOCATION }}.azurecontainer.io>
